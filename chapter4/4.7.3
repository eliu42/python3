4.7.3 Special Parameters

4.7.3.1 Positional-or-Keyword Arguments

If / and * are not present in the function defintion, arguments may be passed to a function by position or by keyword.

4.7.3.2 Positional-Only Parameters

Looking at this in a bit more detail, it is possible to mark certain parameters as positional-only. If positional-only, the parameters' order matters, and the parameters cannot be passed by keyword. Positional-only parameters are placed before a '/'. The '/' is used logically separate the positional- only parameters from the rest of the parameters. If there is no '/' in the function defition, there are no positional-only parameters.

Parameters following the / may be positional-or-keyword or keyword-only.

4.7.3.3 Keyword-Only Arguments

To mark parameters as keyword-only, indicating the parametersmust be passed by keyword argument, place an * in the arguments list just before the first keyword-only parameter.

4.7.3.4 Function Examples

Consider the following example function defintions paying close attention to the markers / and *:

def standard_arg(arg):
	print(arg)

>>> standard_arg(2)
2
>>> standard_arg(arg=2)
2

def pos_only_arg(arg, /):
	print(arg)

>>> pos_only_arg(1)
1
>>> pos_only_arg(arg=1)
Traceback (most recent call last):
	File "<stdin>", lne 1, in <module>
TypeError: pos_only_arg() got an unexpected keyword argument 'arg'

The third function kwd_only_args only allows keyword argument 'arg'

def kwd_only_arg(*, arg):
	print(arg)

>>> kwd_only_arg(3)
Traceback (most recent call last):
	File "<stdin>", lne 1, in <module>
TypeError: kwd_only_arg() takes 0 positional arguments but 1 was given
>>> kwd_only_arg(arg=3)
3

And the last uses all three calling conventions in the same function definition.

def combined_example(pos_only, /, standard, *, kwd_only):
	print(pos_only, standard, kwd_only:)

combined_example(1, 2, 3)
Traceback (most recent call last):
	File "<stdin>" line 1, in <modeule>
TypeError: combined_example() takes 2 positional arguments but 3 were given.

>>> combined_example(1, 2, kwd_only=3)
1 2 3

>>> combined_example(1, standard=2, kwd_only=3)
1 2 3

>>> combined_example(pos_only=1, standard=2, kwd_only=3)
Traeback (most recent call last):
	File "<stdin>", line 1, in <module>
TypeError: combined_example() got an unexpected keyword argument 'pos_only'

-----------------------------------------------------------

Finally, consider this function defintion which has a potential collision between the positional argument name and **kwds which has name has a key:

def foo(name, **kwds):
	return 'name' in kwds

There is no possible call that will make it return True as the keyword 'name' wil always bind to the first parameter. For example:

>>> foo(1, **{'name': 2})
Traceback (most recentl call last):
	File "<stdin>", line 1, in <module>
TypeError: foo() got multiple values for argument 'name'
>>>

But using '/' (positional only arguments), it is
 possible since it allows name as a positional argument and 'name' as key in the keyword arguments:

def foo(name, /, **kkwds):
	return 'name' in kwds
>>> foo(1, **{'name': 2})
True
4.7.3.5.
The use case will determine which parameters to use in the function defintion:

def f(pos1, pos2, /, pos_or_kwd, *, kwd1, kwd2):

As guidance:
	* Use positional-only if you want the name of the parameters to not be available to the user. This is useful when parameter names have no real meaning, if you want to enforce the order of the arguments when the function is called or if you need to take some positional parameters and arbitrary keywords.
	* Use keyword-only when names have meaning and the function definition is more understandable by being expliscit with names or you want to prevent users relying on the position of the argument being passed.
	* For an API, use positional-only to prevent breaking API changes if the parameter's name is modified in the future.
