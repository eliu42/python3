If you do need to iterate over a sequence of numbers, the built-in function range() comes in handy. It generates arithmetic progression:
>>> for i in range(5):
...     print(i)
...
0
1
2
3
4

the given end point is never part of the generated sequence; range(10) generates 10 values, the legal indices for items of a seuqnce of length 10. It is possible to let the range start at another number, or to specify a different increment (even negativel sometimes this is called the 'step'):

range(5, 10)
    5,6,7,8,9

range(0, 10, 3)
    0, 3, 6, 9

range(-10, -100, -30)
    -10, -40, -70

To iterate over the indices of a sequence, you can combine range() and len() as follows:
>>> a = ['Mary', 'had', 'a', 'little', 'lamb']
>>> for i in range(len(a)):
...    print(i, a[i])
...
0 Mary
1 had
2 a
3 little
4 lamb

In most such cases, however it is convenient to use the numerate() function, see Looping Techniques.

A strange thing happens if you just print a range:
>>> print(range(10))
range(0, 10)

In many ways the object return by range() behaves as if it is a list, but in fact it isn't. It is an object which returns the succesive items of the desired sequence when you iterate over it, but it doesn't really make the list, thus saving space.

>>> sum(range(4)) # 0 + 1 + 2 + 3
6
>>> list(range(4))
[0, 1, 2, 3]
