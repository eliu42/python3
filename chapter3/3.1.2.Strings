End of lines are automatically included in the string, but it's possible to prevent this by adding a \ at the end of the line. The following example:
print("""\
Usage: thingy [OPTIONS]
	-h			Display this usage message
	-H hostname		Hostname to connect to
""")
produces the following output (note that the initial newline is not included):
Usage: thingy [OPTIONS]
	-h			Display this usage message
	-H hostname		Hostname to connect to

Strings can be concatenated (glued together) with the + operator, and repeated with *:
>>># 3 times 'un', followed by 'ium'
>>>3 * 'un' + 'ium'
'unununium'

Two or more string literals (i.e. the ones enclosed between quotes) next to each other are automatically concatenated.
>>>'Py' 'thon'
'Python'

This feature is particularly useful when you want to break long strings:
>>> text = ('Put several strings withint parentheses '
...	    'to have them joined together.')
>>> text
'Put several strings within parentheses to have them joined together.'

This only works with two literals though, not with variables or expressions:
>>> prefix 'Py
>>> prefix 'thon'  # can't concatenate a variable and a string litera;
  File "<stdin>", line 1
    prefix 'thon'
                ^
SyntaxError: invalid syntax
>>> ('un' * 3) 'ium'
  File "<stdin>", line1
    ('un' * 3) 'ium'
                   ^
SyntaxError: invalid syntax

--------------------------------------------------------------------

Strings can be indexed (subscripted), with the first character having index 0. There is no seperate character type; a character is simply a string of size one:
>>> word = 'Python'
>>> word[0] # character in position 0
'P'
>>> word[5] # character in position 5
'n'

Indices may also be negative numbers, to start counting from the right:
>>> word[-1] # last character
'n'
>>> word[-2] # second-last character
'o'
>>> word[-6]
'P'

Note that since -0 is the same as 0, negative indices start from -1.

In addition to indexing, slicing is also supported. While indexing is used to obtain individual characters, slicing allows you to obtain substring:

>>> word[0:2] # characters from position 0 (included) to 2 (excluded)
'Py'
>>> word[2:5] # characters from position 2 (included) to 5 (excluded)
'tho'

Note how the start is always included, and the end always excluded. This makes sure that s[:i] + s[i:] is always equal to s:

>>> word[:2] + word[2:]
'Python'
>>> word[:4] + word[4:]
'Python'

Slice indices have useful defaults; an omitted first index defaults to zero, an omitted second index defaults to the size of the string being sliced.
>>> word[:2] # character from the beginning to position 2 (excluded)
'Py'
>>> word[:4] # character from position 4 (included) to the end
'on'
>>> word[-2:] # character from the second-last (included to the end
'on'

Attempting to use an index that is too large will result in an error:
>>> word[42] # the word only has 6 characters
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: string index out of range

However, out of range slice indices are handled gracefully when used for slicing:
>>> word[4:42]
'on'
>>> word[42:]
''

Python strings cannot be changed  they are immutable. Therefore, assinging to an indexed position in the string results in an error:
>>> word[0] = 'J'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'str' object does not support item assignment
>>> word[2:] = 'py'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'str' object does not support item assignment

If you need a different string, you should create a new one:
>>> 'J' + word[1:]
'Jython'
>>> word[:2] + 'py'
'Pypy'
