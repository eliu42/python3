Python knows a number of compound data types, used to group together other values. The most versatile int he list, which can be written as a list of comma-seperated valus (items) between square brackets. Lists might contain items of different types, but usually the items all have the same type.
>>> squares = [1, 4, 9, 16, 25]
>>> squares
[1, 4, 9, 16, 25]

Like strings ( and all other built-in sequence types), lists can be indexed and sliced:

>>> squares[0] #indexing returns the item
1
>>> squares[-1]
25
>>> squares[-3:] #slicing returns a new list
[9, 16, 25]

All slice operations return a new list containing the requested elements. this means that the following slice returns a shallow copy of the list:
>>> squares[:]
[1, 4, 9, 16, 25]

Lists also support operations like concatentation:
>>> squares + [36, 49, 64, 81, 100]
[1, 4, 9 , 16, 25, 36, 49, 64, 81, 100]

Unlike strings, which are immutable, lists are a mutable type, i.e. it is possible to change their content:

cubes = [1, 8, 27, 65, 125] # something's wrong here
>>> 4 ** 3 # the cube of 4 is 64, not 65!
64
>>> cubes[3] = 64 # replace the wrong value
>>> cubes
[1, 8, 27, 64, 125]

You can also add new items at the end of the list, by using the append() method (we will see more about methods later):
>>> cubes.append(216) # add the cube of 6
>>> cubes.append( 7 ** 3) # and the cube of 7
>>> cubes
[1, 8, 27, 64, 125, 216, 343]

>>> letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
>>> letters
['a', 'b', 'c', 'd', 'e', 'f', 'g']
>>> # replace some values
>>> letters[2:5] = ['C', 'D', 'E']
>>> letters
['a', 'b', 'C', 'D', 'E', 'f', 'g']
>>> # now remove them
>>> letters[2:5] = []
>>> letters
['a', 'b', 'f', 'g']
>>> # clear the list by replacing all the elements with an empty list
>>> letters[:] = []
>>> letters
[]

It is possible to nest lists (create lists containing other lists), for example:
>>> a = ['a', 'b', 'c']
>>> n = [1, 2, 3]
>>> x = [a, n]
>>> x
[['a', 'b', 'c'], [1, 2, 3]]
>>> x[0]
['a', 'b', 'c']
>>> x[0][1]
'b'

3.2. First steps towards programming
Of course, we can use Python for more complicated tasks than adding two and two together. For instance. we can write an initial sub-sequence of the Fibonacci series as follow:

>>> #fibonacci series:
... # the sum of two elements defines the next
... a, b = 0, 1
>>> while a< 10:
...    print(a)
...    a, b = b, a+b
...
0
1
1
2
3
5
8

The keyword argument end can be used to avoid the newline after the output, or end the output with a different string:

>>> a, b = 0, 1
>>> while a < 1000:
...    print(a, end=',')
...    a, b = a, a+b
...
0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,
