# Classes provide a means of bundling data and functionality together. Creating a new class creats a new type of object, allowing new instances of that type to be made. Each class insance can have attributes attached to it for maintaing its state. Class instances can alsoi have methods (defnied by its class) for modifying its state.

# Compared wit other programming languages, Python's class mechanism adds classes with a minimum of new syntax and semantics. It is a mixture of the class mechanisms found in c++ and Modula—3. :ython classes provide all the standard features of Object Oriented Programming the class inheritance mechanicsm allows multiple base classes, a derived class can override any methods of its base class or classes, and a method can call the method of a base class with the same name. Object can contain arbitrary amounts and kinds of data. As is true for modules, classes partake of the dynamic nature of Python: they are created at runtime, and can be modoified further after creation.

# In C++ terminology, normally class members (including the data members) are public (except see below Private Variables), and all member nctions are virtual. As in Module—3, there are no shorthands for referencing the object's members from its methods: the method function is declared with an explicit first argument representing the object, which is provided implicitly by the call. As in smalltalk, classes themselves are objects. this provides semantics for importing and renaming. Unlike C++ and Modula-3, built-in types can be used with special syntax (arithmetic operators, subscripting etc.) can be redefined for class instances.

# (Lacking Univerisally accepted terminology to talk about classes, I will make occasional use of Smalltalk and C++ terms. I would use Modula-3 terms, since its object-oreinted semantics are closer to those of Python than c++, but I expect that few readers have heard of it.)
