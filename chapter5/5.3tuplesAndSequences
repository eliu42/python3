5.3 Tuples and Sequences

A tuple consists of a number of values separated by commas, for instance:

see 5.3.py

As you can see, on output tuples are always enclosed in parentheses, so that nested tuples are interpreted correctly; they may be input with or without surounding parentheses, although often parentheses are necessary anyway (if the tuple is part of a larger expression). It is not possible to assign to the individual items of a tuple, however it is possible to create tuples which contain mutable objects, such as lists.

Though tuples may seem similar to lists, they are often used in different situations and for different purposes. Tuples are immutable, and usually contain a heterogeneous sequence of elements that are accessed via unpacking (see later in this section) or indexing (or even by attribute in case of namedtuples). Lists are mutable, and their elements are usually homogeneous and are accessed by iterating over the list.

A special problem is the construction of tuples containing 0 or 1 items: the syntax has some extra quirks to accommodate these. Empty tuples are constructed by an empty pair of parentheses; a tuple with one item is constructed by following a value with a comma (it is not sufficient to enclose a single value in parentheses). Ugly, but effective. For example:

see 5.3.py

The statement t = 12345, 54312, "hello!" is an example of tuple packing: the values 12345, 54321, and "hello!" are packed together in a tuple. The reverse operation is also possible:
>>> x, y, z = t
This is called, weirdly enough, sequence unpacking (and not tuple unpacking) and works for an sequence on the right-hand side. Sequence unpacking requires that there are as many variables on the left side of the equals sign as there are elements in the sequence. Note that multiple assignment is really just a combination of tuple packing and sequence unpacking
